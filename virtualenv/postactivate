#!/bin/bash

if [ ! -e $VIRTUAL_ENV/$VIRTUALENVWRAPPER_PROJECT_FILENAME ]
then
    echo 'No project defined for this virtualenv.'
    return
fi

project_path=$(cat $VIRTUAL_ENV/$VIRTUALENVWRAPPER_PROJECT_FILENAME)
if [ ! -e $project_path ]
then
    echo "Project referenced in $project_path does not exists."
fi
unset $project_path

cdproject

if [ -e .git ]
then
    git pull
fi

if [ -e .bzr ]
then
    bzr pull
fi

#ctags -R --languages=python --python-kinds=-v $VIRTUAL_ENV/lib/python2.7
#if [ -e $VIRTUAL_ENV/src ]
#then
#    ctags -R -a --languages=python --python-kinds=-v $VIRTUAL_ENV/src
#fi
#ctags -R -a --languages=python --python-kinds=-v .

#echo -ne "Building pysmell catalogs."
#
#if [[ ! -f PYSMELLTAGS.stdlib || -n "$(find . -maxdepth 1 -mmin +45 -name PYSMELLTAGS.stdlib)" ]]
#then
#    pysmell $VIRTUAL_ENV/lib/python2.7 -x tests -o PYSMELLTAGS.stdlib >/dev/null
#    echo -ne "."
#fi
#
#if [ -e $VIRTUAL_ENV/src   ]
#then
#    if [[ ! -f PYSMELLTAGS.src || -n "$(find . -maxdepth 1 -mmin +45 -name PYSMELLTAGS.src)" ]]
#    then
#        pysmell $VIRTUAL_ENV/src -x tests -o PYSMELLTAGS.src >/dev/null
#        echo -ne "."
#    fi
#fi
#if [[ ! -f PYSMELLTAGS || -n "$(find . -maxdepth 1 -mmin +45 -name PYSMELLTAGS)" ]]
#then
#    pysmell .
#    echo -ne '.'
#fi
#echo ' Done!'

#if [ -e manage.py ]
#then
#    django-vim
#    ./manage.py runserver
#else
#    gvim
#fi

